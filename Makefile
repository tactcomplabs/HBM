CXXFLAGS=-std=c++11 -Wall
OPTFLAGS=-O3

ifdef DEBUG
ifeq ($(DEBUG), 1)
OPTFLAGS= -O0 -g -DNO_OUTPUT
endif
endif
CXXFLAGS+=$(OPTFLAGS)

STATIC_LIB_NAME := libhbmdramsim.a
LIB_NAME=libhbmdramsim.so
LIB_NAME_MACOS=libhbmdramsim.dylib

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
  LIB_NAME=libhbmdramsim.dylib
  LDFLAGS=-g -shared -Wl
else
  LIB_NAME=libhbmdramsim.so
  LDFLAGS=-g -shared -Wl,-soname,$(LIB_NAME)
endif

SRC = $(wildcard *.cpp)
OBJ = $(addsuffix .o, $(basename $(SRC)))

LIB_SRC := $(filter-out TraceBasedSim.cpp,$(SRC))
LIB_OBJ := $(addsuffix .o, $(basename $(LIB_SRC)))

#build portable objects (i.e. with -fPIC)
POBJ = $(addsuffix .po, $(basename $(LIB_SRC)))

REBUILDABLES=$(OBJ) ${POBJ} $(LIB_NAME) $(STATIC_LIB_NAME)

all: ${LIB_NAME}

#   $@ target name, $^ target deps, $< matched pattern
$(LIB_NAME): $(POBJ)
	g++ $(LDFLAGS) -o $@ $^
	@echo "Built $@ successfully"

$(STATIC_LIB_NAME): $(LIB_OBJ)
	$(AR) crs $@ $^

$(LIB_NAME_MACOS): $(POBJ)
	g++ -dynamiclib -o $@ $^
	@echo "Built $@ successfully"

#include the autogenerated dependency files for each .o file
-include $(OBJ:.o=.dep)
-include $(POBJ:.po=.deppo)

# build dependency list via gcc -M and save to a .dep file
%.dep : %.cpp
	@$(CXX) -M $(CXXFLAGS) $< > $@

%.deppo : %.cpp
	@$(CXX) -M $(CXXFLAGS) -MT"$*.po" $< > $@

# build all .cpp files to .o files
%.o : %.cpp
	g++ $(CXXFLAGS) -o $@ -c $<

#po = portable object .. for lack of a better term
%.po : %.cpp
	g++ $(CXXFLAGS) -fPIC -o $@ -c $<

clean: 
	-rm -f $(REBUILDABLES) *.dep *.deppo
